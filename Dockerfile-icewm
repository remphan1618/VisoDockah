FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

ENV REFRESHED_AT 2024-08-12

LABEL io.k8s.description="Headless VNC Container with IceWM window manager" \
      io.k8s.display-name="Headless VNC Container based on Debian" \
      io.openshift.expose-services="6901:http,5901:xvnc,8080:jupyter,8585:filebrowser" \
      io.openshift.tags="vnc, debian, icewm"

### Connection ports for controlling the UI:
### VNC port:5901
### noVNC webport, connect via http://IP:6901/?password=vncpassword
ENV DISPLAY=:1 \
    VNC_PORT=5901 \
    NO_VNC_PORT=6901
EXPOSE $VNC_PORT $NO_VNC_PORT

### Environment config
ENV HOME=/workspace \
    TERM=xterm \
    STARTUPDIR=/dockerstartup \
    INST_SCRIPTS=/workspace/install \
    NO_VNC_HOME=/workspace/noVNC \
    DEBIAN_FRONTEND=noninteractive \
    VNC_COL_DEPTH=24 \
    VNC_PW="" \
    VNC_PASSWORDLESS=true \
    VNC_VIEW_ONLY=false \
    TZ=Pacific/Auckland
WORKDIR $HOME

### Install necessary dependencies
RUN apt-get update && apt-get install -y \
    wget \
    git \
    build-essential \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    unzip \
    ffmpeg \
    jq \
    icewm \
    openssh-server \
    openssh-client \
    openssh-sftp-server \
    vim \
    net-tools \
    tmux \
    locales \
    sudo \
    rsync \
    tzdata && \
    ln -fs /usr/share/zoneinfo/$TZ /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata && \
    mkdir -p /tmp && chmod 1777 /tmp && \
    rm -rf /var/lib/apt/lists/*

### Configure SSH server (vast.ai compatibility)
RUN sed -i "s/StrictModes yes/StrictModes no/g" /etc/ssh/sshd_config && \
    echo ClientAliveInterval 10 >> /etc/ssh/sshd_config && \
    echo ClientAliveCountMax 2 >> /etc/ssh/sshd_config && \
    echo UsePAM no >> /etc/ssh/sshd_config && \
    echo PasswordAuthentication yes >> /etc/ssh/sshd_config && \
    echo ChallengeResponseAuthentication no >> /etc/ssh/sshd_config && \
    echo Banner /etc/banner >> /etc/ssh/sshd_config && \
    echo 'LogLevel VERBOSE' >> /etc/ssh/sshd_config && \
    echo 'Welcome to vast.ai and VisoMaster. If authentication fails, try again after a few seconds, and double check your ssh key.' > /etc/banner && \
    echo 'Have fun!' >> /etc/banner

### Create installation script directory
RUN mkdir -p $INST_SCRIPTS/

### Copy installation scripts from the LOCAL src directory
COPY src/common/install/*.sh $INST_SCRIPTS/
COPY src/debian/install/*.sh $INST_SCRIPTS/
RUN ls -la $INST_SCRIPTS/

### Make scripts executable
RUN chmod +x $INST_SCRIPTS/*.sh

### Install common tools
RUN $INST_SCRIPTS/tools.sh
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

### Install custom fonts
RUN $INST_SCRIPTS/install_custom_fonts.sh

### Install xvnc-server & noVNC - HTML5 based VNC viewer
RUN $INST_SCRIPTS/tigervnc.sh
RUN $INST_SCRIPTS/no_vnc_1.5.0.sh

### Install firefox
RUN $INST_SCRIPTS/firefox.sh

### Configure IceWM UI
RUN mkdir -p $HOME && \
    echo '#!/usr/bin/env bash\n\necho -e "\\n------------------ startup of IceWM window manager ------------------"\n\n### disable screensaver and power management\nxset -dpms &\nxset s noblank &\nxset s off &\n\n/usr/bin/icewm-session > $HOME/wm.log &\nsleep 1\ncat $HOME/wm.log' > $HOME/wm_startup.sh && \
    chmod +x $HOME/wm_startup.sh

### Configure startup for container user
RUN $INST_SCRIPTS/libnss_wrapper.sh
RUN mkdir -p $STARTUPDIR/common/scripts

### Copy generate_container_user script from the LOCAL src
COPY src/common/scripts/generate_container_user $STARTUPDIR/common/scripts/
RUN chmod +x $STARTUPDIR/common/scripts/generate_container_user

RUN $INST_SCRIPTS/set_user_permission.sh $STARTUPDIR $HOME

### Copy local VisoMaster contents
WORKDIR /workspace
COPY VisoMaster-0.1.6/ /workspace/VisoMaster/
RUN mkdir -p /workspace/VisoMaster/Image \
    /workspace/VisoMaster/Video \
    /workspace/VisoMaster/Output

### Install Python with pip
RUN apt-get update && apt-get install -y python3 python3-pip && \
    rm -rf /var/lib/apt/lists/*

### Install Python dependencies
WORKDIR /workspace/VisoMaster
RUN pip install --no-cache-dir torch==2.4.1+cu124 --index-url https://download.pytorch.org/whl/cu124 && \
    pip install --no-cache-dir -r requirements_cu124.txt && \
    pip uninstall -y onnxruntime-gpu && \
    pip install --no-cache-dir onnxruntime-gpu==1.19.0 && \
    pip cache purge

### Download models
RUN python3 download_models.py

### Set environment variables for TensorRT
ENV TRT_HOME=/workspace/VisoMaster/tensorrt_engine
ENV PATH=${TRT_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${TRT_HOME}/lib:${LD_LIBRARY_PATH}
ENV LIBRARY_PATH=${TRT_HOME}/lib:${LIBRARY_PATH}
ENV CPATH=${TRT_HOME}/include:${CPATH}

### Install jupyterlab and filebrowser
RUN pip install --no-cache-dir jupyterlab && \
    wget -O - https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash && \
    pip cache purge
EXPOSE 8080 8585 22

### Setup SSH server
RUN mkdir -p /var/run/sshd && \
    echo 'root:vncpassword' | chpasswd

# Add vast.ai bash configuration
RUN echo 'PS1="\[\e]0;\u@\h: \w\a\]\[\e[01;32m\]\u@\h\[\e[00m\]:\[\e[01;34m\]\w\[\e[00m\]\$ " ;' > ~/.bashrc

# Copy external startup script (to be executed separately)
COPY onstart.sh /workspace/

# Simply start the SSH service when the container starts
CMD ["/usr/sbin/sshd", "-D"]
