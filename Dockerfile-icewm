# Base image (already includes CUDA 12.4.1 and cuDNN)
FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

# Metadata and environment variables
ENV REFRESHED_AT 2024-08-12 # Consider updating this date

LABEL io.k8s.description="Headless VNC Container with Xfce window manager, firefox and chromium" \
      io.k8s.display-name="Headless VNC Container based on Debian/Ubuntu" \
      io.openshift.expose-services="6901:http,5901:xvnc" \
      io.openshift.tags="vnc, ubuntu, xfce" \
      io.openshift.non-scalable=true

### Connection ports for controlling the UI:
### VNC port:5901
### noVNC webport, connect via http://IP:6901/?password=vncpassword
ENV DISPLAY=:1 \
    VNC_PORT=5901 \
    NO_VNC_PORT=6901
# Expose VNC ports even if not started automatically, plus Jupyter port, filebrowser
EXPOSE $VNC_PORT $NO_VNC_PORT 8080 8585

### Envrionment config
ENV HOME=/workspace \
    TERM=xterm \
    STARTUPDIR=/dockerstartup \
    INST_SCRIPTS=/workspace/install \
    NO_VNC_HOME=/workspace/noVNC \
    DEBIAN_FRONTEND=noninteractive \
    VNC_COL_DEPTH=24 \
    VNC_PW=vncpassword \
    VNC_VIEW_ONLY=false \
    # Set default locale environment variables after locale configuration
    LANG='en_US.UTF-8' \
    LANGUAGE='en_US:en' \
    LC_ALL='en_US.UTF-8' \
    TZ=Asia/Seoul
WORKDIR $HOME

### Install necessary base dependencies including Python 3.10 and pip
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    git \
    build-essential \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    unzip \
    ffmpeg \
    jq \
    tzdata \
    # Install Python 3 (default is 3.10 in Ubuntu 22.04) and pip
    python3 \
    python3-pip \
    python3-venv \
    # Needed for locale-gen
    locales && \
    # Configure timezone
    ln -fs /usr/share/zoneinfo/$TZ /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata && \
    # Configure locale
    echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen en_US.UTF-8 && \
    # Clean up apt cache
    rm -rf /var/lib/apt/lists/* && \
    # Ensure pip is up to date
    python3 -m pip install --no-cache-dir --upgrade pip

### Add all install scripts for further steps
COPY ./src/common/install/ $INST_SCRIPTS/
COPY ./src/debian/install/ $INST_SCRIPTS/ # Keeping name 'debian' for now, but base is Ubuntu

### Give executable permissions to all the scripts in $INST_SCRIPTS
RUN chmod +x $INST_SCRIPTS/*.sh

### Install some common tools using the script
RUN $INST_SCRIPTS/tools.sh

### Install custom fonts
RUN $INST_SCRIPTS/install_custom_fonts.sh

### Install xvnc-server & noVNC - HTML5 based VNC viewer (Still useful for manual start)
RUN $INST_SCRIPTS/tigervnc.sh
RUN $INST_SCRIPTS/no_vnc_1.5.0.sh # Ensure this script doesn't have hardcoded python paths if any

### Install firefox and chrome browser
RUN $INST_SCRIPTS/firefox.sh

### Install xfce UI (Still useful for manual VNC start)
RUN $INST_SCRIPTS/xfce_ui.sh
COPY ./src/common/xfce/ $HOME/

### configure startup scripts and permissions
RUN $INST_SCRIPTS/libnss_wrapper.sh
COPY ./src/common/scripts $STARTUPDIR
RUN chmod +x $STARTUPDIR/* # Ensure scripts in STARTUPDIR are executable
RUN $INST_SCRIPTS/set_user_permission.sh $STARTUPDIR $HOME

### --- Conda Environment Section Removed ---

### Rely on base image for CUDA and cuDNN - removing Conda installs for these

### Install visomaster
WORKDIR /workspace
RUN git clone https://github.com/remphan1618/VisoMaster.git && \
    cd VisoMaster && \
    cd .. # This cd .. seems odd, maybe intended? It returns to /workspace
WORKDIR /workspace/VisoMaster # Explicitly set back to VisoMaster directory

### Install dependencies using pip
# Use --no-cache-dir to potentially reduce layer size
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install --no-cache-dir scikit-image
# MODIFIED: Keep requirements_cu124.txt commented out
# RUN pip install -r requirements_cu124.txt --no-cache-dir

### Download models (MODIFIED: Removed from build - use On-Start script)
# WORKDIR /workspace/VisoMaster/model_assets
# RUN python download_models.py
# WORKDIR /workspace/VisoMaster # Return to VisoMaster root directory

### Install jupyterlab using pip
RUN pip install --no-cache-dir jupyterlab

### Install filebrowser
# Ensure wget is installed (done earlier)
RUN wget -qO- https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash

### Final startup configuration
# Copy the VNC startup script (can be run manually if needed)
COPY ./src/vnc_startup_jupyterlab_filebrowser.sh /dockerstartup/vnc_startup.sh
RUN chmod 765 /dockerstartup/vnc_startup.sh

# Set default VNC resolution (still relevant if VNC started manually)
ENV VNC_RESOLUTION=1280x1024

### Removed ENTRYPOINT and CMD instructions that used Conda
# The container will likely be started using the vnc_startup.sh script or an external command.
