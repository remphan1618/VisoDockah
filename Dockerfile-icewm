FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

ENV REFRESHED_AT 2024-08-12

LABEL io.k8s.description="Headless VNC Container with IceWM window manager" \
      io.k8s.display-name="Headless VNC Container based on Debian" \
      io.openshift.expose-services="6901:http,5901:xvnc,8080:jupyter,8585:filebrowser" \
      io.openshift.tags="vnc, debian, icewm"

### Connection ports for controlling the UI:
### VNC port:5901
### noVNC webport, connect via http://IP:6901/?password=vncpassword
ENV DISPLAY=:1 \
    VNC_PORT=5901 \
    NO_VNC_PORT=6901
EXPOSE $VNC_PORT $NO_VNC_PORT

### Environment config
ENV HOME=/workspace \
    TERM=xterm \
    STARTUPDIR=/dockerstartup \
    INST_SCRIPTS=/workspace/install \
    NO_VNC_HOME=/workspace/noVNC \
    DEBIAN_FRONTEND=noninteractive \
    VNC_COL_DEPTH=24 \
    VNC_PW="" \
    VNC_PASSWORDLESS=true \
    VNC_VIEW_ONLY=false \
    TZ=Pacific/Auckland
WORKDIR $HOME

### Install necessary dependencies
RUN apt-get update && apt-get install -y \
    wget \
    git \
    build-essential \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    unzip \
    ffmpeg \
    jq \
    icewm \
    openssh-server \
    openssh-client \
    openssh-sftp-server \
    vim \
    net-tools \
    tmux \
    tzdata && \
    ln -fs /usr/share/zoneinfo/$TZ /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata && \
    rm -rf /var/lib/apt/lists/*

### Clone the repository to get all the scripts
WORKDIR /tmp
RUN git clone https://github.com/remphan1618/VisoDockah.git
WORKDIR /tmp/VisoDockah

### Create installation script directory
RUN mkdir -p $INST_SCRIPTS/

### Copy installation scripts from the cloned repository
RUN cp -r ./src/common/install/*.sh $INST_SCRIPTS/ && \
    cp -r ./src/debian/install/*.sh $INST_SCRIPTS/ && \
    ls -la $INST_SCRIPTS/

### Make scripts executable
RUN chmod +x $INST_SCRIPTS/*.sh

### Install common tools
RUN $INST_SCRIPTS/tools.sh
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

### Install custom fonts
RUN $INST_SCRIPTS/install_custom_fonts.sh

### Install xvnc-server & noVNC - HTML5 based VNC viewer
RUN $INST_SCRIPTS/tigervnc.sh
RUN $INST_SCRIPTS/no_vnc_1.5.0.sh

### Install firefox
RUN $INST_SCRIPTS/firefox.sh

### Configure IceWM UI
RUN mkdir -p $HOME && \
    echo '#!/usr/bin/env bash\n\necho -e "\\n------------------ startup of IceWM window manager ------------------"\n\n### disable screensaver and power management\nxset -dpms &\nxset s noblank &\nxset s off &\n\n/usr/bin/icewm-session > $HOME/wm.log &\nsleep 1\ncat $HOME/wm.log' > $HOME/wm_startup.sh && \
    chmod +x $HOME/wm_startup.sh

### Configure startup
RUN $INST_SCRIPTS/libnss_wrapper.sh
RUN mkdir -p $STARTUPDIR/common/scripts

### Copy generate_container_user script from the cloned repository
RUN cp -r ./src/common/scripts/generate_container_user $STARTUPDIR/common/scripts/ && \
    chmod +x $STARTUPDIR/common/scripts/generate_container_user

RUN $INST_SCRIPTS/set_user_permission.sh $STARTUPDIR $HOME

### Clone VisoMaster repository
WORKDIR /workspace
RUN git clone -b v0.1.6 https://github.com/visomaster/VisoMaster.git && \
    mkdir -p /workspace/VisoMaster/Image \
    /workspace/VisoMaster/Video \
    /workspace/VisoMaster/Output \
    /workspace/VisoMaster/model_assets \
    /workspace/VisoMaster/tensorrt_engine

### Install Python with pip
RUN apt-get update && apt-get install -y python3 python3-pip && \
    rm -rf /var/lib/apt/lists/*

### Install Python dependencies
WORKDIR /workspace/VisoMaster
RUN pip install --no-cache-dir torch==2.4.1+cu124 --index-url https://download.pytorch.org/whl/cu124 && \
    pip install --no-cache-dir -r requirements_cu124.txt && \
    pip uninstall -y onnxruntime-gpu && \
    pip install --no-cache-dir onnxruntime-gpu==1.19.0 && \
    pip cache purge

### Download models
RUN python3 download_models.py

### Set environment variables for TensorRT
ENV TRT_HOME=/workspace/VisoMaster/tensorrt_engine
ENV PATH=${TRT_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${TRT_HOME}/lib:${LD_LIBRARY_PATH}
ENV LIBRARY_PATH=${TRT_HOME}/lib:${LIBRARY_PATH}
ENV CPATH=${TRT_HOME}/include:${CPATH}

### Install jupyterlab and filebrowser
RUN pip install --no-cache-dir jupyterlab && \
    wget -O - https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash && \
    pip cache purge
EXPOSE 8080 8585 22

### Setup SSH server
RUN mkdir -p /var/run/sshd && \
    echo 'root:vncpassword' | chpasswd && \
    sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config && \
    sed -i 's/^#\?X11Forwarding no/X11Forwarding yes/' /etc/ssh/sshd_config

### Create startup script
RUN mkdir -p $STARTUPDIR
RUN echo '#!/bin/bash' > $STARTUPDIR/entrypoint.sh && \
    echo 'echo "Starting VisoMaster environment setup..."' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Create logs directory in workspace' >> $STARTUPDIR/entrypoint.sh && \
    echo 'mkdir -p /workspace/logs' >> $STARTUPDIR/entrypoint.sh && \
    echo 'export LOG_DIR=/workspace/logs' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Save environment variables for any service that needs them' >> $STARTUPDIR/entrypoint.sh && \
    echo 'env | grep _ >> /etc/environment' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Set VNC environment variables' >> $STARTUPDIR/entrypoint.sh && \
    echo 'export DISPLAY=:1' >> $STARTUPDIR/entrypoint.sh && \
    echo 'export VNC_PORT=5901' >> $STARTUPDIR/entrypoint.sh && \
    echo 'export NO_VNC_PORT=6901' >> $STARTUPDIR/entrypoint.sh && \
    echo 'export NO_VNC_HOME=/workspace/noVNC' >> $STARTUPDIR/entrypoint.sh && \
    echo 'export STARTUPDIR=/dockerstartup' >> $STARTUPDIR/entrypoint.sh && \
    echo 'export VNC_COL_DEPTH=24' >> $STARTUPDIR/entrypoint.sh && \
    echo 'export VNC_RESOLUTION=1280x1024' >> $STARTUPDIR/entrypoint.sh && \
    echo 'export VNC_PW=""' >> $STARTUPDIR/entrypoint.sh && \
    echo 'export VNC_PASSWORDLESS=true' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Source container user generation script' >> $STARTUPDIR/entrypoint.sh && \
    echo 'if [ -f "$STARTUPDIR/common/scripts/generate_container_user" ]; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '  source $STARTUPDIR/common/scripts/generate_container_user' >> $STARTUPDIR/entrypoint.sh && \
    echo 'fi' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Start SSH server if installed' >> $STARTUPDIR/entrypoint.sh && \
    echo 'if [ -f /usr/sbin/sshd ]; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '  echo "Starting SSH server..."' >> $STARTUPDIR/entrypoint.sh && \
    echo '  mkdir -p /var/run/sshd' >> $STARTUPDIR/entrypoint.sh && \
    echo '  # Start SSH with root login permitted and empty passwords allowed' >> $STARTUPDIR/entrypoint.sh && \
    echo '  sed -i '"'"'s/#PermitRootLogin prohibit-password/PermitRootLogin yes/'"'"' /etc/ssh/sshd_config' >> $STARTUPDIR/entrypoint.sh && \
    echo '  sed -i '"'"'s/#PermitEmptyPasswords no/PermitEmptyPasswords yes/'"'"' /etc/ssh/sshd_config' >> $STARTUPDIR/entrypoint.sh && \
    echo '  /usr/sbin/sshd || echo "WARNING: Failed to start SSH server"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'fi' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Fix user permissions for critical directories' >> $STARTUPDIR/entrypoint.sh && \
    echo 'if [ -f "$INST_SCRIPTS/set_user_permission.sh" ]; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '  echo "Setting proper permissions on critical directories..."' >> $STARTUPDIR/entrypoint.sh && \
    echo '  bash $INST_SCRIPTS/set_user_permission.sh /workspace /workspace/VisoMaster /workspace/VisoMaster/tensorrt_engine' >> $STARTUPDIR/entrypoint.sh && \
    echo 'fi' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Download TensorRT if not already present' >> $STARTUPDIR/entrypoint.sh && \
    echo 'if [ ! -d "/workspace/VisoMaster/tensorrt_engine" ] || [ -z "$(ls -A /workspace/VisoMaster/tensorrt_engine)" ]; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '  echo "Downloading TensorRT..."' >> $STARTUPDIR/entrypoint.sh && \
    echo '  mkdir -p /workspace/VisoMaster/tensorrt_engine' >> $STARTUPDIR/entrypoint.sh && \
    echo '  ' >> $STARTUPDIR/entrypoint.sh && \
    echo '  if [ -f "/workspace/TensorRT-10.9.0.34.Linux.x86_64-gnu.cuda-12.8.tar.gz" ]; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '    # Use local file if it exists' >> $STARTUPDIR/entrypoint.sh && \
    echo '    echo "Using local TensorRT package..."' >> $STARTUPDIR/entrypoint.sh && \
    echo '    tar -xzf /workspace/TensorRT-10.9.0.34.Linux.x86_64-gnu.cuda-12.8.tar.gz -C /workspace/VisoMaster/tensorrt_engine --strip-components=1' >> $STARTUPDIR/entrypoint.sh && \
    echo '  else' >> $STARTUPDIR/entrypoint.sh && \
    echo '    # Download from HuggingFace' >> $STARTUPDIR/entrypoint.sh && \
    echo '    wget --progress=dot:giga -O /tmp/TensorRT.tar.gz https://huggingface.co/Red1618/Viso/resolve/main/TensorRT-10.9.0.34.Linux.x86_64-gnu.cuda-12.8.tar.gz?download=true' >> $STARTUPDIR/entrypoint.sh && \
    echo '    tar -xzf /tmp/TensorRT.tar.gz -C /workspace/VisoMaster/tensorrt_engine --strip-components=1' >> $STARTUPDIR/entrypoint.sh && \
    echo '    rm -f /tmp/TensorRT.tar.gz' >> $STARTUPDIR/entrypoint.sh && \
    echo '  fi' >> $STARTUPDIR/entrypoint.sh && \
    echo 'fi' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Download inswapper model if needed' >> $STARTUPDIR/entrypoint.sh && \
    echo 'if [ ! -f "/workspace/VisoMaster/model_assets/inswapper_128_fp16.onnx" ]; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '  echo "Downloading inswapper model..."' >> $STARTUPDIR/entrypoint.sh && \
    echo '  if [ -f "/workspace/inswapper_128_fp16.onnx" ]; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '    # Use local file if it exists' >> $STARTUPDIR/entrypoint.sh && \
    echo '    echo "Using local inswapper model..."' >> $STARTUPDIR/entrypoint.sh && \
    echo '    cp /workspace/inswapper_128_fp16.onnx /workspace/VisoMaster/model_assets/inswapper_128_fp16.onnx' >> $STARTUPDIR/entrypoint.sh && \
    echo '  else' >> $STARTUPDIR/entrypoint.sh && \
    echo '    # Download from HuggingFace' >> $STARTUPDIR/entrypoint.sh && \
    echo '    wget -O /workspace/VisoMaster/model_assets/inswapper_128_fp16.onnx https://huggingface.co/Red1618/Viso/resolve/main/inswapper_128_fp16.onnx?download=true' >> $STARTUPDIR/entrypoint.sh && \
    echo '  fi' >> $STARTUPDIR/entrypoint.sh && \
    echo 'fi' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Clean up any existing VNC processes' >> $STARTUPDIR/entrypoint.sh && \
    echo 'pkill -f vnc 2>/dev/null || true' >> $STARTUPDIR/entrypoint.sh && \
    echo 'pkill -f novnc 2>/dev/null || true' >> $STARTUPDIR/entrypoint.sh && \
    echo 'rm -rf /tmp/.X*-lock /tmp/.X11-unix/* 2>/dev/null || true' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Create empty VNC password file (completely disable authentication)' >> $STARTUPDIR/entrypoint.sh && \
    echo 'mkdir -p "$HOME/.vnc"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'PASSWD_PATH="$HOME/.vnc/passwd"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'if [[ -f $PASSWD_PATH ]]; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '    rm -f $PASSWD_PATH' >> $STARTUPDIR/entrypoint.sh && \
    echo 'fi' >> $STARTUPDIR/entrypoint.sh && \
    echo 'touch $PASSWD_PATH' >> $STARTUPDIR/entrypoint.sh && \
    echo 'chmod 600 $PASSWD_PATH' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Start noVNC with no security' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "Starting noVNC web client with NO SECURITY..."' >> $STARTUPDIR/entrypoint.sh && \
    echo 'if [ -d "$NO_VNC_HOME" ]; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '  $NO_VNC_HOME/utils/novnc_proxy --vnc localhost:$VNC_PORT --listen $NO_VNC_PORT --web $NO_VNC_HOME > $LOG_DIR/novnc_startup.log 2>&1 &' >> $STARTUPDIR/entrypoint.sh && \
    echo '  PID_SUB=$!' >> $STARTUPDIR/entrypoint.sh && \
    echo 'else' >> $STARTUPDIR/entrypoint.sh && \
    echo '  echo "WARNING: noVNC home directory not found"' >> $STARTUPDIR/entrypoint.sh && \
    echo '  # Keep a reference for wait command at the end' >> $STARTUPDIR/entrypoint.sh && \
    echo '  sleep infinity &' >> $STARTUPDIR/entrypoint.sh && \
    echo '  PID_SUB=$!' >> $STARTUPDIR/entrypoint.sh && \
    echo 'fi' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Start VNC server with all security disabled' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "Starting VNC server with NO SECURITY..."' >> $STARTUPDIR/entrypoint.sh && \
    echo 'vncserver -kill $DISPLAY &> $LOG_DIR/vnc_startup.log 2>/dev/null || true' >> $STARTUPDIR/entrypoint.sh && \
    echo 'vncserver $DISPLAY -depth $VNC_COL_DEPTH -geometry $VNC_RESOLUTION -SecurityTypes None -localhost no --I-KNOW-THIS-IS-INSECURE > $LOG_DIR/vnc_startup.log 2>&1' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "VNC server started with NO SECURITY on port 5901"' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Start window manager' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "Starting window manager..."' >> $STARTUPDIR/entrypoint.sh && \
    echo 'if [ -f "$HOME/wm_startup.sh" ]; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '  $HOME/wm_startup.sh &> $LOG_DIR/wm_startup.log &' >> $STARTUPDIR/entrypoint.sh && \
    echo 'else' >> $STARTUPDIR/entrypoint.sh && \
    echo '  echo "WARNING: Window manager startup script not found"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'fi' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Start additional services with no authentication' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "Starting JupyterLab at port 8080 with NO SECURITY..."' >> $STARTUPDIR/entrypoint.sh && \
    echo 'if command -v jupyter &> /dev/null; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '  jupyter lab --port 8080 --notebook-dir=/ --allow-root --no-browser --ip=0.0.0.0 --NotebookApp.token='"'"'"'"'"' --NotebookApp.password='"'"'"'"'"' > $LOG_DIR/jupyter.log 2>&1 &' >> $STARTUPDIR/entrypoint.sh && \
    echo 'else' >> $STARTUPDIR/entrypoint.sh && \
    echo '  echo "WARNING: JupyterLab not found"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'fi' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "Starting Filebrowser at port 8585 with NO SECURITY..."' >> $STARTUPDIR/entrypoint.sh && \
    echo 'if command -v filebrowser &> /dev/null; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '  filebrowser -r / -p 8585 -a 0.0.0.0 --noauth > $LOG_DIR/filebrowser.log 2>&1 &' >> $STARTUPDIR/entrypoint.sh && \
    echo 'else' >> $STARTUPDIR/entrypoint.sh && \
    echo '  echo "WARNING: Filebrowser not found"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'fi' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Create symlink to root filesystem for convenience' >> $STARTUPDIR/entrypoint.sh && \
    echo 'ln -sf / /workspace/root' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Start VisoMaster in the background' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "Starting VisoMaster..."' >> $STARTUPDIR/entrypoint.sh && \
    echo 'if [ -f "/workspace/VisoMaster/main.py" ]; then' >> $STARTUPDIR/entrypoint.sh && \
    echo '  cd /workspace/VisoMaster' >> $STARTUPDIR/entrypoint.sh && \
    echo '  nohup python main.py > $LOG_DIR/visomaster.log 2>&1 &' >> $STARTUPDIR/entrypoint.sh && \
    echo 'else' >> $STARTUPDIR/entrypoint.sh && \
    echo '  echo "WARNING: VisoMaster main.py not found"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'fi' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "Setup complete! ALL SECURITY DISABLED!"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "Services available at:"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "- VNC: port 5901 (NO SECURITY)"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "- Web VNC: port 6901 (NO SECURITY)"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "- JupyterLab: port 8080 (NO SECURITY, access to / root directory)"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "- Filebrowser: port 8585 (NO SECURITY, access to / root directory)"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "- VisoMaster: Running in background"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "- All logs are saved in: /workspace/logs/"' >> $STARTUPDIR/entrypoint.sh && \
    echo 'echo "- Root filesystem accessible via /workspace/root symlink"' >> $STARTUPDIR/entrypoint.sh && \
    echo '' >> $STARTUPDIR/entrypoint.sh && \
    echo '# Keep the script running' >> $STARTUPDIR/entrypoint.sh && \
    echo 'wait $PID_SUB' >> $STARTUPDIR/entrypoint.sh && \
    chmod +x $STARTUPDIR/entrypoint.sh

### Copy the entrypoint.sh to an editable location
RUN cp $STARTUPDIR/entrypoint.sh /workspace/onstart.sh && \
    chmod +x /workspace/onstart.sh

### Create a script to reload the onstart.sh after editing
RUN echo '#!/bin/bash\ncp /workspace/onstart.sh $STARTUPDIR/entrypoint.sh\nchmod +x $STARTUPDIR/entrypoint.sh\necho "Startup script updated successfully."' > /workspace/update_startup.sh && \
    chmod +x /workspace/update_startup.sh

### Clean up temporary files
RUN rm -rf /tmp/VisoDockah

ENTRYPOINT ["/dockerstartup/entrypoint.sh"]
