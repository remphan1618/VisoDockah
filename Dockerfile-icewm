# Base image
FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

# Metadata and environment variables
ENV REFRESHED_AT 2024-08-12

LABEL io.k8s.description="Headless VNC Container with Xfce window manager, firefox and chromium" \
      io.k8s.display-name="Headless VNC Container based on Debian" \
      io.openshift.expose-services="6901:http,5901:xvnc" \
      io.openshift.tags="vnc, debian, xfce" \
      io.openshift.non-scalable=true

### Connection ports for controlling the UI:
### VNC port:5901
### noVNC webport, connect via http://IP:6901/?password=vncpassword
ENV DISPLAY=:1 \
    VNC_PORT=5901 \
    NO_VNC_PORT=6901
EXPOSE $VNC_PORT $NO_VNC_PORT

### Envrionment config
ENV HOME=/workspace \
    TERM=xterm \
    STARTUPDIR=/dockerstartup \
    INST_SCRIPTS=/workspace/install \
    NO_VNC_HOME=/workspace/noVNC \
    DEBIAN_FRONTEND=noninteractive \
    VNC_COL_DEPTH=24 \
    VNC_PW=vncpassword \
    VNC_VIEW_ONLY=false \
    TZ=Asia/Seoul
    # JUPYTER_DIR is removed as Jupyter will run within Conda env
WORKDIR $HOME

### Install necessary base dependencies (excluding python which will come from Conda)
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    git \
    build-essential \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    unzip \
    ffmpeg \
    jq \
    tzdata && \
    # Configure timezone
    ln -fs /usr/share/zoneinfo/$TZ /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata && \
    # Clean up
    rm -rf /var/lib/apt/lists/*

### Install Miniconda
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh && \
    bash miniconda.sh -b -p /opt/conda && \
    rm miniconda.sh

### Add Conda to the PATH
ENV PATH /opt/conda/bin:$PATH

### Add all install scripts for further steps
# Using COPY instead of ADD for local files is generally preferred
COPY ./src/common/install/ $INST_SCRIPTS/
COPY ./src/debian/install/ $INST_SCRIPTS/

### Give executable permissions to all the scripts in $INST_SCRIPTS
# Using the simpler chmod pattern from the reference file
RUN chmod +x $INST_SCRIPTS/*.sh

### Install some common tools using the script
RUN $INST_SCRIPTS/tools.sh
# Assuming tools.sh installs 'locales' package if needed for the next step

# Configure locale (ensure 'locales' package is installed by tools.sh)
RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && locale-gen
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

### Install custom fonts
RUN $INST_SCRIPTS/install_custom_fonts.sh

### Install xvnc-server & noVNC - HTML5 based VNC viewer
RUN $INST_SCRIPTS/tigervnc.sh
RUN $INST_SCRIPTS/no_vnc_1.5.0.sh

### Install firefox and chrome browser
RUN $INST_SCRIPTS/firefox.sh
# Assuming chrome installation is handled within firefox.sh or another script if needed

### Install xfce UI
# Aligning with the reference file: using xfce_ui.sh and copying config to $HOME
RUN $INST_SCRIPTS/xfce_ui.sh
COPY ./src/common/xfce/ $HOME/

### configure startup scripts and permissions
RUN $INST_SCRIPTS/libnss_wrapper.sh
COPY ./src/common/scripts $STARTUPDIR
RUN chmod +x $STARTUPDIR/* # Ensure scripts in STARTUPDIR are executable
RUN $INST_SCRIPTS/set_user_permission.sh $STARTUPDIR $HOME

### Create conda environment
# Aligning with reference file: naming the env 'visomaster'
RUN conda create -n visomaster python=3.10.13 -y && conda clean --all -y

### Activate the environment for subsequent RUN commands and set default
ENV CONDA_DEFAULT_ENV visomaster
# The following line modifies the container's bashrc for interactive sessions
RUN echo "conda activate $CONDA_DEFAULT_ENV" >> ~/.bashrc
# The following ENV makes the env active for subsequent RUN/CMD/ENTRYPOINT
ENV PATH /opt/conda/envs/$CONDA_DEFAULT_ENV/bin:$PATH

### Install CUDA and cuDNN via Conda
RUN conda install -c nvidia/label/cuda-12.4.1 cuda-runtime -y
RUN conda install -c conda-forge cudnn -y

### Install visomaster
WORKDIR /workspace
# MODIFIED: Clone repo first, then checkout the specific tag v0.1.6
RUN git clone https://github.com/visomaster/VisoMaster.git && \
    cd VisoMaster && \
    git checkout v0.1.6 && \
    cd ..
WORKDIR /workspace/VisoMaster

### Install dependencies within the Conda environment
# MODIFIED: Removed installation of non-existent ./requirements.txt
# RUN pip install -r ./requirements.txt --no-cache-dir
RUN conda install scikit-image -y
RUN pip install -r requirements_cu124.txt --no-cache-dir

### Download models (MODIFIED: Removed from build - use On-Start script)
# WORKDIR /workspace/VisoMaster/model_assets
# RUN python download_models.py
# WORKDIR /workspace/VisoMaster # Return to VisoMaster root directory

### Install jupyterlab within the Conda environment
RUN pip install jupyterlab --no-cache-dir
EXPOSE 8080

### Install filebrowser
# Ensure wget is installed (done earlier)
RUN wget -qO- https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash
EXPOSE 8585

### Final startup configuration
# Copy the correct VNC startup script
COPY ./src/vnc_startup_jupyterlab_filebrowser.sh /dockerstartup/vnc_startup.sh
# Using chmod 765 as in reference file, though +x is usually sufficient
RUN chmod 765 /dockerstartup/vnc_startup.sh

# Set default VNC resolution
ENV VNC_RESOLUTION=1280x1024

# Set the entrypoint to the VNC startup script
ENTRYPOINT ["/dockerstartup/vnc_startup.sh"]

# Default command for the entrypoint script
CMD ["--wait"]

