FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

ENV REFRESHED_AT 2024-08-12
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Pacific/Auckland

# Install only essential packages upfront
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget git python3 python3-pip \
    icewm tigervnc-standalone-server firefox \
    ffmpeg fonts-wqy-zenhei \
    baobab ncdu htop && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Setup basic environment
ENV HOME=/workspace
ENV DISPLAY=:1
ENV VNC_PORT=5901
ENV NO_VNC_PORT=6901
WORKDIR $HOME

# Setup directories
RUN mkdir -p $HOME/.vnc $HOME/.icewm /dockerstartup

# Setup VNC and window manager
COPY ./src/debian/icewm/ $HOME/
RUN chmod +x $HOME/wm_startup.sh

# Setup startup scripts
COPY ./src/common/scripts/ /dockerstartup/
COPY ./src/vnc_startup_jupyterlab_filebrowser.sh /dockerstartup/vnc_startup.sh
RUN chmod +x /dockerstartup/vnc_startup.sh /dockerstartup/generate_container_user

# Clone VisoMaster repository
WORKDIR /workspace
RUN git clone -b v0.1.6 https://github.com/visomaster/VisoMaster.git

# Create directories for VisoMaster
RUN mkdir -p /workspace/VisoMaster/model_assets

# Create additional directories
RUN mkdir -p /workspace/VisoMaster/Image
RUN mkdir -p /workspace/VisoMaster/Video 
RUN mkdir -p /workspace/VisoMaster/Output

# Install Python dependencies with maximum cleanup
WORKDIR /workspace/VisoMaster

# Install minimum required Python packages
RUN pip install --no-cache-dir torch==2.4.1+cu124 --index-url https://download.pytorch.org/whl/cu124 && \
    pip cache purge

# Install remaining requirements in small batches
RUN pip install --no-cache-dir -r requirements_cu124.txt && \
    pip uninstall -y onnxruntime-gpu && \
    pip install --no-cache-dir onnxruntime-gpu==1.19.0 && \
    pip cache purge

# Get special inswapper file 
RUN wget -O inswapper_128_fp16.onnx https://huggingface.co/Red1618/Viso/resolve/main/inswapper_128_fp16.onnx?download=true && \
    cp inswapper_128_fp16.onnx /workspace/VisoMaster/model_assets/ && \
    rm -f inswapper_128_fp16.onnx

# Get TensorRT and clean up immediately
RUN mkdir -p /workspace/VisoMaster/tensorrt_engine && \
    cd /workspace/VisoMaster && \
    wget -O TensorRT.tar.gz https://huggingface.co/Red1618/Viso/resolve/main/TensorRT-10.9.0.34.Linux.x86_64-gnu.cuda-12.8.tar.gz?download=true && \
    tar -xzf TensorRT.tar.gz -C /workspace/VisoMaster/tensorrt_engine --strip-components=1 && \
    rm -f TensorRT.tar.gz

# Set TensorRT environment variables
ENV TRT_HOME=/workspace/VisoMaster/tensorrt_engine
ENV PATH=${TRT_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${TRT_HOME}/lib:${LD_LIBRARY_PATH}

# Download dependencies
RUN wget -O dependencies.zip https://github.com/visomaster/visomaster-assets/releases/download/v0.1.0_dp/dependencies.zip && \
    mkdir -p /workspace/VisoMaster/dependencies && \
    unzip dependencies.zip -d /workspace/VisoMaster/dependencies && \
    rm -f dependencies.zip

# Download models
WORKDIR /workspace/VisoMaster
RUN python download_models.py

# Install JupyterLab
RUN pip install --no-cache-dir jupyterlab && pip cache purge

# Install filebrowser
RUN wget -O - https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash

# Clean system to free space
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /tmp/* && \
    rm -rf /var/tmp/*

# Expose ports
EXPOSE $VNC_PORT $NO_VNC_PORT 8080 8585

ENTRYPOINT ["/dockerstartup/vnc_startup.sh"]
CMD ["--wait"]
